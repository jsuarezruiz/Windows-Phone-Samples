<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cimbalino.Phone.Toolkit.Background</name>
    </assembly>
    <members>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Cimbalino.Phone.Toolkit.Compression.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Cimbalino.Phone.Toolkit.Compression.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Cimbalino.Phone.Toolkit.Compression.ZlibStream"/>
             <seealso cref="T:Cimbalino.Phone.Toolkit.Compression.GZipStream"/>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Cimbalino.Phone.Toolkit.Compression.ZlibStream"/> and <see cref="T:Cimbalino.Phone.Toolkit.Compression.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Cimbalino.Phone.Toolkit.Compression.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Cimbalino.Phone.Toolkit.Compression.DeflateStream"/>
             <seealso cref="T:Cimbalino.Phone.Toolkit.Compression.ZlibStream"/>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Cimbalino.Phone.Toolkit.Compression.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding">
            <summary>
            Provides a text encoder for the iso-8859-1 encoding, aka Latin1 encoding,
            for platforms that do not support it, for example on Silverlight or some
            Compact Framework platforms.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a set of characters from a character array into
            a byte array.
            </summary>
            <returns>
            The actual number of bytes written into <paramref name="bytes"/>.
            </returns>
            <param name="chars">The character array containing the set of characters to encode.
            </param><param name="start">The index of the first character to encode.
            </param><param name="count">The number of characters to encode.
            </param><param name="bytes">The byte array to contain the resulting sequence of bytes.
            </param><param name="byteIndex">The index at which to start writing the resulting sequence of bytes.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <returns>
            The actual number of characters written into <paramref name="chars"/>.
            </returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode.
            </param><param name="start">The index of the first byte to decode.
            </param><param name="count">The number of bytes to decode.
            </param><param name="chars">The character array to contain the resulting set of characters.
            </param><param name="charIndex">The index at which to start writing the resulting set of characters.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced by encoding a set of characters
            from the specified character array.
            </summary>
            <returns>
            The number of bytes produced by encoding the specified characters. This class
            alwas returns the value of <paramref name="count"/>.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters produced by decoding a sequence
            of bytes from the specified byte array.
            </summary>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes. This class
            alwas returns the value of <paramref name="count"/>.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <returns>
            The maximum number of bytes produced by encoding the specified number of characters. This
            class alwas returns the value of <paramref name="charCount"/>.
            </returns>
            <param name="charCount">The number of characters to encode.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <returns>
            The maximum number of characters produced by decoding the specified number of bytes. This class
            alwas returns the value of <paramref name="byteCount"/>.
            </returns>
            <param name="byteCount">The number of bytes to decode.</param>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.WebName">
            <summary>
            Gets the name registered with the
            Internet Assigned Numbers Authority (IANA) for the current encoding.
            </summary>
            <returns>
            Always returns "iso-8859-1".
            </returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.Iso8859Dash1Encoding.CharacterCount">
            <summary>
            Gets the number of characters that are supported by this encoding.
            This property returns a maximum value of 256, as the encoding class
            only supports single byte encodings (1 byte == 256 possible values).
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.#ctor(Cimbalino.Phone.Toolkit.Compression.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.Inflate(Cimbalino.Phone.Toolkit.Compression.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeDeflate(Cimbalino.Phone.Toolkit.Compression.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeDeflate(Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeDeflate(Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.InitializeDeflate(Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.Deflate(Cimbalino.Phone.Toolkit.Compression.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.SetDeflateParams(Cimbalino.Phone.Toolkit.Compression.CompressionLevel,Cimbalino.Phone.Toolkit.Compression.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Compression.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Compression.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Cimbalino.Phone.Toolkit.Compression.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Cimbalino.Phone.Toolkit.Compression.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Cimbalino.Phone.Toolkit.Compression.DeflateStream"/>
             <seealso cref="T:Cimbalino.Phone.Toolkit.Compression.GZipStream"/>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.#ctor(System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionMode,Cimbalino.Phone.Toolkit.Compression.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Cimbalino.Phone.Toolkit.Compression.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Compression.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Data.TableObject">
            <summary>
            Represents a base class to use with a TableAttribute marked class.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.VerifyPropertyName(System.String)">
            <summary>
            Verifies that a property name exists in this ViewModel. This method can be called before the property is used, for instance before calling RaisePropertyChanged. It avoids errors when a property name is changed but some places are missed. <para>This method is only active in DEBUG mode.</para>
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event if needed.
            </summary>
            <remarks>If the propertyName parameter does not correspond to an existing property on the current class, an exception is thrown in DEBUG configuration only.</remarks>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the PropertyChanged event if needed.
            </summary>
            <typeparam name="T">The type of the property that changed.</typeparam>
            <param name="propertyExpression">An expression identifying the property that changed.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.RaisePropertyChanging(System.String)">
            <summary>
            Raises the PropertyChanging event if needed.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.RaisePropertyChanging``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the PropertyChanging event if needed.
            </summary>
            <typeparam name="T">The type of the property that is changing.</typeparam>
            <param name="propertyExpression">An expression identifying the property that is changing.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Extracts the name of a property from an expression.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyExpression">An expression returning the property's name.</param>
            <returns>The name of the property returned by the expression.</returns>
            <exception cref="T:System.ArgumentNullException">If the expression is null.</exception>
            <exception cref="T:System.ArgumentException">If the expression does not represent a property.</exception>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.Set``1(System.String,``0@,``0)">
            <summary>
            Assigns a new value to the property. Then, raises the PropertyChanged event if needed. 
            </summary>
            <typeparam name="T">The type of the property that changed.</typeparam>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="field">The field storing the property's value.</param>
            <param name="newValue">The property's value after the change occurred.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Data.TableObject.Set``1(System.Linq.Expressions.Expression{System.Func{``0}},``0@,``0)">
            <summary>
            Assigns a new value to the property. Then, raises the PropertyChanged event if needed. 
            </summary>
            <typeparam name="T">The type of the property that changed.</typeparam>
            <param name="propertyExpression">An expression identifying the property that changed.</param>
            <param name="field">The field storing the property's value.</param>
            <param name="newValue">The property's value after the change occurred.</param>
        </member>
        <member name="E:Cimbalino.Phone.Toolkit.Data.TableObject.PropertyChanged">
            <summary>
            Occurs after a property value changes.
            </summary>
        </member>
        <member name="E:Cimbalino.Phone.Toolkit.Data.TableObject.PropertyChanging">
            <summary>
            Occurs before a property value changes.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Byte"/> array instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String"/> representation encoded with base 64 digits.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <returns>The string representation, in base 64, of the contents of <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String"/> representation, using the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for encoding the characters.</param>
            <returns>The string representation, of the contents of <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeSHA1Hash(System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA1"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeSHA1Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA1"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeSHA256Hash(System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA256"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeSHA256Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA256"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeMD5Hash(System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.MD5"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeMD5Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.MD5"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeHMACSHA1Hash(System.Byte[],System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACSHA1"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeHMACSHA1Hash(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACSHA1"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeHMACSHA256Hash(System.Byte[],System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACSHA256"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeHMACSHA256Hash(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACSHA256"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeHMACMD5Hash(System.Byte[],System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACMD5"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ByteArrayExtensions.ComputeHMACMD5Hash(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACMD5"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">An array of 8-bit unsigned integers.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Windows.DependencyObject"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            Returns an object's parent object in the visual tree.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The parent object of the <paramref name="dependencyObject"/> object in the visual tree.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions.GetVisualAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Returns the ancestor object of the <paramref name="dependencyObject"/> object in the visual tree with the specified type.
            </summary>
            <typeparam name="T">The type of the visual ancestor.</typeparam>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The ancestor object of the <paramref name="dependencyObject"/> object in the visual tree with the specified type.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions.GetVisualChilds(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual children of a dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The visual children of the dependency object.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions.GetVisualChilds``1(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual children of a dependency object with the specified type.
            </summary>
            <typeparam name="T">The type of the visual children.</typeparam>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The visual children of the dependency object with the specified type.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions.GetVisualDescendents(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual descendants of a dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The visual descendants of the dependency object.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DependencyObjectExtensions.GetVisualDescendents``1(System.Windows.DependencyObject)">
            <summary>
            Retrieves all the visual descendants of a dependency object with the specified type.
            </summary>
            <typeparam name="T">The type of the visual descendants.</typeparam>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The visual descendants of the dependency object with the specified type.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.DispatcherExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Windows.Threading.Dispatcher"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DispatcherExtensions.BeginInvokeAfterTimeout(System.Windows.Threading.Dispatcher,System.Double,System.Action)">
            <summary>
            Executes the specified action asynchronously on the thread the Dispatcher is associated with, after the specified timeout.
            </summary>
            <param name="dispatcher">The dispatcher instance.</param>
            <param name="timeout">The amount of time to delay before the action is invoked.</param>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DispatcherExtensions.BeginInvokeAfterTimeout(System.Windows.Threading.Dispatcher,System.TimeSpan,System.Action)">
            <summary>
            Executes the specified action asynchronously on the thread the Dispatcher is associated with, after the specified timeout.
            </summary>
            <param name="dispatcher">The dispatcher instance.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the action is invoked.</param>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.DispatcherExtensions.ToTaskSchedulerAsync(System.Windows.Threading.Dispatcher)">
            <summary>
            Retrieves a <see cref="T:System.Threading.Tasks.TaskScheduler"/> instance for the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.TaskScheduler"/> instance for the thread the Dispatcher is associated with.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.EnumExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Enum"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.EnumExtensions.GetNames(System.Enum)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumObj">The enumeration.</param>
            <returns>A string array of the names of the constants in <paramref name="enumObj"/>.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.EnumExtensions.GetValues(System.Enum)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumObj">The enumeration.</param>
            <returns>An array that contains the values of the constants in <paramref name="enumObj"/>.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.EventHandlerExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.EventHandler`1"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.EventHandlerExtensions.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event.
            </summary>
            <param name="eventHandler">The event to raise.</param>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">The arguments for the event.</param>
            <typeparam name="T">The type of the event data generated by the event.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.EventHandlerExtensions.SafeInvoke``1(System.EventHandler{``0},System.Object,``0,System.Func{``0,System.Boolean})">
            <summary>
            Raises the event with cancellation possibility.
            </summary>
            <param name="eventHandler">The event to raise.</param>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">The arguments for the event.</param>
            <param name="cancelInvocation">A predicate that returns true to cancel the invocation.</param>
            <typeparam name="T">The type of the event data generated by the event.</typeparam>
            <returns>true if the event has not been cancelled by any of the subscribers; otherwise, false.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.FrameworkElementExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Windows.FrameworkElement"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.FrameworkElementExtensions.ResetLanguageWithCurrentCulture(System.Windows.FrameworkElement)">
            <summary>
            Resets the <see cref="T:System.Windows.FrameworkElement"/> language information with a <see cref="T:System.Windows.Markup.XmlLanguage"/> matching the current <see cref="P:System.Threading.Thread.CurrentCulture"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.ICollectionExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Collections.Generic.ICollection`1"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ICollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the specified <see cref="T:System.Collections.Generic.ICollection`1"/> is empty.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/> to check.</param>
            <typeparam name="TSource">The collection items type.</typeparam>
            <returns>True if the collection is empty; otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="sourceCollection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type TSource is a reference type.</param>
            <typeparam name="TSource">The collection items type.</typeparam>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IComparableExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IComparable"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IComparableExtensions.Between``1(``0,``0,``0)">
            <summary>
            Checks if the value is between two other values.
            </summary>
            <param name="value">The value.</param>
            <param name="minValue">The lower value in the range.</param>
            <param name="maxValue">The upper value in the range.</param>
            <typeparam name="T">The values type.</typeparam>
            <returns>True if the value is between the two other values; otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IComparableExtensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the a value between two other values.
            </summary>
            <param name="value">The value.</param>
            <param name="minValue">The lower value in the range.</param>
            <param name="maxValue">The upper value in the range.</param>
            <typeparam name="T">The values type.</typeparam>
            <returns>The value clamped between the two other specified values.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IComparableExtensions.Max``1(``0,``0)">
            <summary>
            Compares the current value with another value and returns the largest of the two.
            </summary>
            <param name="currentValue">The value.</param>
            <param name="value">The value to compare to.</param>
            <typeparam name="T">The values type.</typeparam>
            <returns>The largest of the two values.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IComparableExtensions.Min``1(``0,``0)">
            <summary>
            Compares the current value with another value and returns the smallest of the two.
            </summary>
            <param name="currentValue">The value.</param>
            <param name="value">The value to compare to.</param>
            <typeparam name="T">The values type.</typeparam>
            <returns>The smallest of the two values.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IConvertibleExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IConvertible"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IConvertibleExtensions.ToStringInvariantCulture(System.IConvertible)">
            <summary>
            Converts the value of this instance to its equivalent string representation, using an <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IDictionaryExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Collections.Generic.IDictionary`2"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IDictionaryExtensions.Apply``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Applies the specified <see cref="T:System.Action`1"/> to the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="action">The action to apply.</param>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <returns>The value for the specified key.</returns>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The default value if the specified key does not exist.</param>
            <returns>The value for the specified key.</returns>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IDictionaryExtensions.SetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Sets the value for the specified key. If the entry does not exist, a new one will be added.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key whose value to set.</param>
            <param name="value">The value for the specified key.</param>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the specified <see cref="T:System.Action`1"/> to the enumerable.
            </summary>
            <param name="source">The enumerable.</param>
            <param name="action">The action to apply.</param>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Applies the specified <see cref="T:System.Action`2"/> to the enumerable.
            </summary>
            <param name="source">The enumerable.</param>
            <param name="action">The action to apply.</param>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns a collection of the descendant elements for this enumerable, using the specified <see cref="T:System.Func`2"/> function.
            </summary>
            <param name="source">The enumerable.</param>
            <param name="descendBy">The function to use for descending.</param>
            <returns>All the descendant items.</returns>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> from this enumerable.
            </summary>
            <param name="source">The enumerable.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains the elements from the input sequence.</returns>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.ToOptimizedObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> from this enumerable.
            </summary>
            <param name="source">The enumerable.</param>
            <returns>An <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> that contains the elements from the input sequence.</returns>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produces a sequence containing the current elements along with the specified element.
            </summary>
            <param name="source">The enumerable.</param>
            <param name="element">A <typeparamref name="TResult"/> element to include in the sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the current elements along with the specified element.</returns>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Produces a sequence containing a subset of the current elements, starting from the specified position.
            </summary>
            <param name="source">The enumerable.</param>
            <param name="offset">The zero-based offset at which to begin returning items from the enumerable.</param>
            <param name="count">The number of items to return from the enumerable.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a subset of the current elements, starting from the specified position.</returns>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces a sequence containing the current elements randomly shuffled.
            </summary>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
            <param name="source">The enumerable.</param>
            <returns>A sequence containing the current elements randomly shuffled.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Produces a sequence containing the current elements randomly shuffled, using the specified seed to calculate a starting value for the pseudo-random number sequence.
            </summary>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
            <returns>A sequence containing the current elements randomly shuffled.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IEnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Produces a sequence containing batches of the current elements with the specified size.
            </summary>
            <param name="source">The enumerable.</param>
            <param name="batchSize">The batch size.</param>
            <typeparam name="TResult">The type of items in the enumerable.</typeparam>
            <returns>A sequence containing batches of the current elements with the specified size.</returns>
            <exception cref="T:System.ArgumentException">If the batch size is below 1.</exception>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IFormattableExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IFormattable"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IFormattableExtensions.ToStringInvariantCulture(System.IFormattable,System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation, using the specified format and an <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="format">A standard or custom format string.</param>
            <returns>The string representation of the value of this instance as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IntExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Int32"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IntExtensions.Times(System.Int32,System.Action)">
            <summary>
            Repeats the specified <see cref="T:System.Action"/> the number of times.
            </summary>
            <param name="input">The number of times to repeat the <see cref="T:System.Action"/>.</param>
            <param name="action">The <see cref="T:System.Action"/> to repeat.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Repeats the specified <see cref="T:System.Action`1"/> the number of times.
            </summary>
            <param name="input">The number of times to repeat the <see cref="T:System.Action`1"/>.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to repeat.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IntExtensions.Times``1(System.Int32,System.Func{``0})">
            <summary>
            Repeats the specified <see cref="T:System.Func`1"/> the number of times.
            </summary>
            <param name="input">The number of times to repeat the <see cref="T:System.Action"/>.</param>
            <param name="function">The <see cref="T:System.Func`1"/> to repeat.</param>
            <typeparam name="T">The return value type.</typeparam>
            <returns>An enumerable with the results.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IntExtensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Repeats the specified <see cref="T:System.Func`2"/> the number of times.
            </summary>
            <param name="input">The number of times to repeat the <see cref="T:System.Action"/>.</param>
            <param name="function">The <see cref="T:System.Func`2"/> to repeat.</param>
            <typeparam name="T">The return value type.</typeparam>
            <returns>An enumerable with the results.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IntExtensions.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="first">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IntExtensions.To(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="first">The value of the first integer in the sequence.</param>
            <param name="last">The value of the last integer in the sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Object"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Searches for the public property with the specified name and gets its value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The requested property value.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Searches for the public property with the specified name and gets its value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The requested property value.</returns>
            <typeparam name="TObject">The object type.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Searches for the public property with the specified name and sets its value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The requested property value to set.</param>
            <typeparam name="TObject">The object type.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Searches for the public method with the specified name and invokes it using the specified parameters.
            </summary>
            <param name="obj">The object.</param>
            <param name="methodName">The name of the method.</param>
            <param name="args">An argument list for the invoked method or constructor.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Searches for the public method with the specified name and invokes it using the specified parameters, returning the result.
            </summary>
            <param name="obj">The object.</param>
            <param name="methodName">The name of the method.</param>
            <param name="args">An argument list for the invoked method or constructor.</param>
            <returns>The value returned from invoking the method.</returns>
            <typeparam name="TObject">The object type.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.AddEventHandler(System.Object,System.String,System.Delegate)">
            <summary>
            Adds an event handler to an event source.
            </summary>
            <param name="obj">The object.</param>
            <param name="target">The event source.</param>
            <param name="handler">Encapsulation of a method or methods to be invoked when the event is raised by the target.</param>
            <returns>Returns a <see cref="T:System.Delegate"/> to the attached event handler.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.ObjectExtensions.RemoveEventHandler(System.Object,System.String,System.Delegate)">
            <summary>
            Removes an event handler from an event source.
            </summary>
            <param name="obj">The object.</param>
            <param name="target">The event source.</param>
            <param name="handler">The delegate to be unhooked from the event source.</param>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.StreamReaderExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IO.StreamReader"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamReaderExtensions.ReadLines(System.IO.StreamReader)">
            <summary>
            Reads the lines of a stream.
            </summary>
            <param name="streamReader">The <see cref="T:System.IO.StreamReader"/> instance.</param>
            <returns>The lines of the stream.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamReaderExtensions.ReadAllLines(System.IO.StreamReader)">
            <summary>
            Reads all lines of the stream.
            </summary>
            <param name="streamReader">The <see cref="T:System.IO.StreamReader"/> instance.</param>
            <returns>A string array containing all lines of the stream.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamReaderExtensions.ReadAllLinesAsync(System.IO.StreamReader)">
            <summary>
            Reads all lines of the stream.
            </summary>
            <param name="streamReader">The <see cref="T:System.IO.StreamReader"/> instance.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.StreamWriterExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IO.StreamWriter"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamWriterExtensions.WriteAllLines(System.IO.StreamWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes all lines.
            </summary>
            <param name="streamWriter">The stream writer.</param>
            <param name="lines">The lines.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamWriterExtensions.WriteAllLinesAsync(System.IO.StreamWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes all lines.
            </summary>
            <param name="streamWriter">The stream writer.</param>
            <param name="lines">The lines.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.StringExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.GetBytes(System.String)">
            <summary>
            Encodes all the characters in the string into a sequence of UTF8 bytes.
            </summary>
            <param name="input">The current string.</param>
            <returns>A byte array containing the results of encoding the set of characters.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes all the characters in the string into a sequence of bytes, using the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="input">The current string.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for encoding the characters.</param>
            <returns>A byte array containing the results of encoding the set of characters.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.FromBase64String(System.String)">
            <summary>
            Converts the string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="input">The current string.</param>
            <returns>An array of 8-bit unsigned integers that is equivalent to the string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces one or more format items in the string with the string representation of a specified object.
            </summary>
            <param name="format">The composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of the string in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Replaces one or more format items in the string with the string representation of a specified object.
            </summary>
            <param name="format">The composite format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of the string in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.FormatWithInvariantCulture(System.String,System.Object[])">
            <summary>
            Replaces one or more format items in the string with the string representation of a specified object, using an <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="format">The composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of the string in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns a new string containing the specified number of characters from the left side of the current string.
            </summary>
            <param name="input">The current string.</param>
            <param name="length">The number of characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in the string, the entire string is returned.</param>
            <returns>Returns a string containing a specified number of characters from the left side of the string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns a new string containing the specified number of characters from the right side of the current string.
            </summary>
            <param name="input">The current string.</param>
            <param name="length">The number of characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in the string, the entire string is returned.</param>
            <returns>Returns a string containing a specified number of characters from the right side of the string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RemoveLeft(System.String,System.Int32)">
            <summary>
            Returns a new string in which a specified number of characters from the left side of the current string are deleted.
            </summary>
            <param name="input">The current string.</param>
            <param name="length">The number of characters to remove. If greater than or equal to the number of characters in the string, an empty string is returned.</param>
            <returns>Returns a string in which a specified number of characters from the left side of the current string where deleted.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RemoveRight(System.String,System.Int32)">
            <summary>
            Returns a new string in which a specified number of characters from the right side of the current string are deleted.
            </summary>
            <param name="input">The current string.</param>
            <param name="length">The number of characters to remove. If greater than or equal to the number of characters in the string, an empty string is returned.</param>
            <returns>Returns a string in which a specified number of characters from the right side of the current string where deleted.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.Times(System.String,System.Int32)">
            <summary>
            Returns a new string by repeating the current string the specified number of times.
            </summary>
            <param name="input">The current string.</param>
            <param name="count">The number of times the current string occurs.</param>
            <returns>A new string by repeating the current string the specified number of times.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexIsMatch(System.String,System.String)">
            <summary>
            Indicates whether the regular expression finds a match in the input string using the regular expression specified in the pattern parameter.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexIsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the regular expression finds a match in the input string, using the regular expression specified in the pattern parameter and the matching options supplied in the options parameter.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexMatch(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the regular expression supplied in the pattern parameter.
            </summary>
            <param name="input">The string to be tested for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the regular expression supplied in a pattern parameter with matching options supplied in an options parameter.
            </summary>
            <param name="input">The string to be tested for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexMatches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of the regular expression specified in the pattern parameter.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of the regular expression supplied in a pattern parameter with matching options supplied in an options parameter.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values.</param>
            <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.String)">
            <summary>
            Within a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="replacement">The replacement string.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Within a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="replacement">The replacement string.</param>
            <param name="options">A bitwise combination of the enumeration values.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Within a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Within a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate. Specified options modify the matching operation.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
            <param name="options">A bitwise combination of the enumeration values.</param>
            <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.UriExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.UriExtensions.QueryString(System.Uri)">
            <summary>
            Gets a collection of query string values.
            </summary>
            <param name="uri">The current uri.</param>
            <returns>A collection that contains the query string values.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.WebRequestExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Net.WebRequest"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WebRequestExtensions.SetNoCacheHeaders(System.Net.WebRequest)">
            <summary>
            Set <see cref="P:System.Net.WebRequest.Headers"/> collection with "no-cache header values.
            </summary>
            <param name="request">The web request.</param>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePng(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Encodes a WriteableBitmap object into a PNG stream.
            </summary>
            <param name="writeableBitmap">The writeable bitmap.</param>
            <param name="outputStream">The image data stream.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePng(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionLevel)">
            <summary>
            Encodes a WriteableBitmap object into a PNG stream, using the specified output compression.
            </summary>
            <param name="writeableBitmap">The writeable bitmap.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="compressionLevel">The image compression level.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePng(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters)">
            <summary>
            Encodes a WriteableBitmap object into a PNG stream, using the specified output <see cref="T:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters"/>.
            </summary>
            <param name="writeableBitmap">The writeable bitmap.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="parameters">The image save parameters.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePngAsync(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Encodes a WriteableBitmap object into a PNG stream.
            </summary>
            <param name="writeableBitmap">The writeable bitmap.</param>
            <param name="outputStream">The image data stream.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePngAsync(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,Cimbalino.Phone.Toolkit.Compression.CompressionLevel)">
            <summary>
            Encodes a WriteableBitmap object into a PNG stream, using the specified output compression.
            </summary>
            <param name="writeableBitmap">The writeable bitmap.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="compressionLevel">The image compression level.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePngAsync(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters)">
            <summary>
            Encodes a WriteableBitmap object into a PNG stream, using the specified output <see cref="T:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters"/>.
            </summary>
            <param name="writeableBitmap">The writeable bitmap.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="parameters">The image save parameters.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SaveJpeg(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,System.Int32)">
            <summary>
            Encodes a WriteableBitmap object into a JPEG stream, with parameters for setting the target quality of the JPEG file.
            </summary>
            <param name="writeableBitmap">The WriteableBitmap object.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="quality">This parameter represents the quality of the JPEG photo with a range between 0 and 100, with 100 being the best photo quality. We recommend that you do not fall lower than a value of 70. because JPEG picture quality diminishes significantly below that level. </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SaveJpeg(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes a WriteableBitmap object into a JPEG stream, with parameters for setting the target width, height, and quality of the JPEG file.
            </summary>
            <param name="writeableBitmap">The WriteableBitmap object.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="targetWidth">The target width of the file.</param>
            <param name="targetHeight">The target height of the file.</param>
            <param name="quality">This parameter represents the quality of the JPEG photo with a range between 0 and 100, with 100 being the best photo quality. We recommend that you do not fall lower than a value of 70. because JPEG picture quality diminishes significantly below that level. </param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SaveJpegAsync(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,System.Int32)">
            <summary>
            Encodes a WriteableBitmap object into a JPEG stream, with parameters for setting the target quality of the JPEG file.
            </summary>
            <param name="writeableBitmap">The WriteableBitmap object.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="quality">This parameter represents the quality of the JPEG photo with a range between 0 and 100, with 100 being the best photo quality. We recommend that you do not fall lower than a value of 70. because JPEG picture quality diminishes significantly below that level. </param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SaveJpegAsync(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes a WriteableBitmap object into a JPEG stream, with parameters for setting the target width, height, and quality of the JPEG file.
            </summary>
            <param name="writeableBitmap">The WriteableBitmap object.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="targetWidth">The target width of the file.</param>
            <param name="targetHeight">The target height of the file.</param>
            <param name="quality">This parameter represents the quality of the JPEG photo with a range between 0 and 100, with 100 being the best photo quality. We recommend that you do not fall lower than a value of 70. because JPEG picture quality diminishes significantly below that level. </param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SaveJpegAsync(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes a WriteableBitmap object into a JPEG stream, with parameters for setting the target width, height, orientation, and quality of the JPEG file.
            </summary>
            <param name="writeableBitmap">The WriteableBitmap object.</param>
            <param name="outputStream">The image data stream.</param>
            <param name="targetWidth">The target width of the file.</param>
            <param name="targetHeight">The target height of the file.</param>
            <param name="orientation">This parameter is not currently used by this method. Use a value of 0 as a placeholder.</param>
            <param name="quality">This parameter represents the quality of the JPEG photo with a range between 0 and 100, with 100 being the best photo quality. We recommend that you do not fall lower than a value of 70. because JPEG picture quality diminishes significantly below that level. </param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters">
            <summary>
            The <see cref="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapExtensions.SavePng(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream,Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters)"/> parameters.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters"/> class.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.CompressionLevel">
            <summary>
            Gets or sets the picture compression level.
            </summary>
            <value>The picture compression level.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.HorizontalResolution">
            <summary>
            Gets or sets the picture horizontal resolution.
            </summary>
            <value>The picture horizontal resolution.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.VerticalResolution">
            <summary>
            Gets or sets the picture vertical resolution.
            </summary>
            <value>The picture vertical resolution.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.Gamma">
            <summary>
            Gets or sets the picture gamma.
            </summary>
            <value>The picture gamma.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.SaveResolution">
            <summary>
            Gets or sets a value indicating whether to save the picture resolution information.
            </summary>
            <value>
            true to save the picture resolution information; otherwise, false.
            </value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Extensions.WriteableBitmapSavePngParameters.SaveGamma">
            <summary>
            Gets or sets a value indicating whether to save the picture gamma information.
            </summary>
            <value>
            true to save the picture gamma information; otherwise, false.
            </value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.Xml.XmlReader"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions.ReadElementContentAsUrn(System.Xml.XmlReader)">
            <summary>
            Reads the current element as a urn and returns the contents as a string.
            </summary>
            <param name="reader">The current reader.</param>
            <returns>The element content as a string.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions.ReadElementContentAsNullable``1(System.Xml.XmlReader)">
            <summary>
            Reads the current element as the requested nullable type.
            </summary>
            <param name="reader">The current reader.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The element content converted to the requested nullable typed object.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions.ReadElementContentAsArray``1(System.Xml.XmlReader,System.Func{System.Xml.XmlReader,``0})">
            <summary>
            Reads the current element as an array and returns the contents using the specified function.
            </summary>
            <param name="reader">The current reader.</param>
            <param name="deserialize">The deserialization function.</param>
            <typeparam name="T">The array return type.</typeparam>
            <returns>An array containing the deserialized items.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions.GetAttributeAsBool(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the value of the attribute with the specified name, as a boolean value.
            </summary>
            <param name="reader">The current reader.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute with the specified name, as a boolean value.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions.GetAttributeAsInt(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the value of the attribute with the specified name, as an <see cref="T:System.Int32"/> value.
            </summary>
            <param name="reader">The current reader.</param>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute with the specified name, as an <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.XmlReaderExtensions.GetAndSkip``1(System.Xml.XmlReader,System.Func{System.Xml.XmlReader,``0})">
            <summary>
            Executes the specified function, skips the current node, and returns the value.
            </summary>
            <param name="reader">The current reader.</param>
            <param name="readerFunction">The function to execute.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The result value from the executed function, just after skipping to the next node.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestBackgroundServiceAgentNode">
            <summary>
            Represents a background service agent in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestBackgroundServiceAgentNode.Specifier">
            <summary>
            Gets or sets the background service agent specifier.
            </summary>
            <value>The background service agent specifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestBackgroundServiceAgentNode.Name">
            <summary>
            Gets or sets the background service agent name.
            </summary>
            <value>The background service agent name.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestBackgroundServiceAgentNode.Source">
            <summary>
            Gets or sets the background service agent source.
            </summary>
            <value>The background service agent source.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestBackgroundServiceAgentNode.Type">
            <summary>
            Gets or sets the background service agent type.
            </summary>
            <value>The background service agent type.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestDefaultTaskNode">
            <summary>
            Represents a default task in the application manifest.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestTaskNodeBase">
            <summary>
            Represents a task in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestTaskNodeBase.Name">
            <summary>
            Gets or sets the name of the task.
            </summary>
            <value>The name of the task.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestDefaultTaskNode.NavigationPage">
            <summary>
            Gets or sets the page to navigate.
            </summary>
            <value>The page to navigate.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestExtendedTaskNode">
            <summary>
            Represents an extended task in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestExtendedTaskNode.BackgroundServiceAgents">
            <summary>
            Gets or sets the list of background service agents.
            </summary>
            <value>The list of background service agents.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream">
            <summary>
            Creates a stream that helps dividing data in fixed size chunks.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.#ctor(System.Int32,System.Action{System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream"/> class.
            </summary>
            <param name="chunkSize">The chunk size.</param>
            <param name="chunkReadyAction">The <see cref="T:System.Action"/> to perform when a chunk is ready.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Flush">
            <summary>
            Overrides <see cref="M:System.IO.Stream.Flush"/> so that no action is performed.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>Calling this method will raise a <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported.
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The origin.</param>
            <returns>Calling this method will raise a <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.SetLength(System.Int64)">
            <summary>
            This method is not supported.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from a buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Close">
            <summary>
            Closes the current stream and releases all resources.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>Always false as <see cref="T:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream"/> doesn't support reading.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>Always false as <see cref="T:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream"/> doesn't support seeking.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>true if the stream supports writing; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Length">
            <summary>
            This property is not supported.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ChunkedStream.Position">
            <summary>
            This property is not supported.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilitiesNode">
            <summary>
            Represents the application capabilities information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilitiesNode.Capabilities">
            <summary>
            Gets or sets the application capabilities information.
            </summary>
            <value>The application capabilities information.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilitiesNode.HardwareCapabilities">
            <summary>
            Gets or sets the application hardware capabilities information.
            </summary>
            <value>The application hardware capabilities information.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilityNode">
            <summary>
            Represents an application capability information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilityNode.Id">
            <summary>
            Gets or sets the application capability identifier.
            </summary>
            <value>The application capability identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilityNode.Title">
            <summary>
            Gets or sets the application capability title.
            </summary>
            <value>The application capability title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCapabilityNode.Disclosure">
            <summary>
            Gets or sets the application capability disclosure state.
            </summary>
            <value>The application capability disclosure state.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCategoryNode">
            <summary>
            Represents an application category information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCategoryNode.Id">
            <summary>
            Gets or sets the application category identifier.
            </summary>
            <value>The application category identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCategoryNode.Title">
            <summary>
            Gets or sets the application category title.
            </summary>
            <value>The application category title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCategoryNode.IsRoot">
            <summary>
            Gets or sets a value indicating if this is a root category.
            </summary>
            <value>true if this is a root category; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppCategoryNode.ParentId">
            <summary>
            Gets or sets the application category parent category identifier.
            </summary>
            <value>The application category parent category identifier.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppContentNode">
            <summary>
            Represents an application content information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppContentNode.Type">
            <summary>
            Gets or sets the application content information type.
            </summary>
            <value>The application content information type.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppContentNode.Text">
            <summary>
            Gets or sets the application content information text.
            </summary>
            <value>The application content information text.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode">
            <summary>
            Represents the contents of the application entry information from the marketplace.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.Updated">
            <summary>
            Gets or sets the application entry .
            </summary>
            <value>The application entry .</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.Title">
            <summary>
            Gets or sets the application entry title.
            </summary>
            <value>The application entry title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.Id">
            <summary>
            Gets or sets the application entry identifier.
            </summary>
            <value>The application entry identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.Version">
            <summary>
            Gets or sets the application entry version.
            </summary>
            <value>The application entry version.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.PayloadId">
            <summary>
            Gets or sets the application entry payload identifier.
            </summary>
            <value>The application entry payload identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.SkuId">
            <summary>
            Gets or sets the application entry sku identifier.
            </summary>
            <value>The application entry sku identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.SkuLastUpdated">
            <summary>
            Gets or sets the application entry sku last updated.
            </summary>
            <value>The application entry sku last updated.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.IsAvailableInCountry">
            <summary>
            Gets or sets a value indicating whether the application entry is available in the country.
            </summary>
            <value>true if the application entry is available in the country; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.IsAvailableInStore">
            <summary>
            Gets or sets a value indicating whether the application entry is available in the store.
            </summary>
            <value>true if the application entry is available in the store; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.IsClientTypeCompatible">
            <summary>
            Gets or sets a value indicating whether the application entry is compatible with the client type.
            </summary>
            <value>true if the application entry is compatible with the client type; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.IsHardwareCompatible">
            <summary>
            Gets or sets a value indicating whether the application entry is compatible with the hardware.
            </summary>
            <value>true if the application entry is compatible with the hardware; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.IsBlacklisted">
            <summary>
            Gets or sets a value indicating whether the application entry is blacklisted.
            </summary>
            <value>true if the application entry is blacklisted; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.Url">
            <summary>
            Gets or sets the application entry url.
            </summary>
            <value>The application entry url.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.PackageSize">
            <summary>
            Gets or sets the application entry package size.
            </summary>
            <value>The application entry package size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.InstallSize">
            <summary>
            Gets or sets the application entry install size.
            </summary>
            <value>The application entry install size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.ClientTypes">
            <summary>
            Gets or sets the application entry client types.
            </summary>
            <value>The application entry client types.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.SupportedLanguages">
            <summary>
            Gets or sets the application entry supported languages.
            </summary>
            <value>The application entry supported languages.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppEntryNode.DeviceCapabilities">
            <summary>
            Gets or sets the application entry device capabilities.
            </summary>
            <value>The application entry device capabilities.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppHwCapabilityNode">
            <summary>
            Represents an application hardware capability information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppHwCapabilityNode.RequirementType">
            <summary>
            Gets or sets the application hardware capability requirement type.
            </summary>
            <value>The application hardware capability requirement type.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppHwCapabilityNode.Id">
            <summary>
            Gets or sets the application hardware capability identifier.
            </summary>
            <value>The application hardware capability identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppHwCapabilityNode.Title">
            <summary>
            Gets or sets the application hardware capability title.
            </summary>
            <value>The application hardware capability title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppHwCapabilityNode.Required">
            <summary>
            Gets or sets a value indicating whether the application hardware capability is required.
            </summary>
            <value>true if the application hardware capability is required; otherwise, false.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppImageNode">
            <summary>
            Represents an application image information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppImageNode.Id">
            <summary>
            Gets or sets the application image identifier.
            </summary>
            <value>The application image identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppImageNode.Orientation">
            <summary>
            Gets or sets the application image orientation.
            </summary>
            <value>The application image orientation.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode">
            <summary>
            Represents the contents of the application information from the marketplace.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Updated">
            <summary>
            Gets or sets a value indicating whether the application is updated.
            </summary>
            <value>true if the application is updated; otherwise false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Title">
            <summary>
            Gets or sets the application title.
            </summary>
            <value>The application title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Id">
            <summary>
            Gets or sets the application identifier.
            </summary>
            <value>The application identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Content">
            <summary>
            Gets or sets the application content information.
            </summary>
            <value>The application content information.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.IapCount">
            <summary>
            Gets or sets the application content iap count.
            </summary>
            <value>The application content iap count.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.SortTitle">
            <summary>
            Gets or sets the application sort title.
            </summary>
            <value>The application sort title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.ReleaseDate">
            <summary>
            Gets or sets the application release date.
            </summary>
            <value>The application release date.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.VisibilityStatus">
            <summary>
            Gets or sets the application visibility state.
            </summary>
            <value>The application visibility state.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Publisher">
            <summary>
            Gets or sets the application publisher.
            </summary>
            <value>The application publisher.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.AverageUserRating">
            <summary>
            Gets or sets the application average user rating.
            </summary>
            <value>The application average user rating.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.UserRatingCount">
            <summary>
            Gets or sets the application user rating count.
            </summary>
            <value>The application user rating count.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Image">
            <summary>
            Gets or sets the application image.
            </summary>
            <value>The application image.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Screenshots">
            <summary>
            Gets or sets the application screenshots.
            </summary>
            <value>The application screenshots.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Categories">
            <summary>
            Gets or sets the application categories.
            </summary>
            <value>The application categories.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Tags">
            <summary>
            Gets or sets the application tags.
            </summary>
            <value>The application tags.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.TaxString">
            <summary>
            Gets or sets the application tax string.
            </summary>
            <value>The application tax string.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.BackgroundImage">
            <summary>
            Gets or sets the application background image.
            </summary>
            <value>The application background image.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Offers">
            <summary>
            Gets or sets the application available offers.
            </summary>
            <value>The application available offers.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.PublisherId">
            <summary>
            Gets or sets the application publisher identifier.
            </summary>
            <value>The application publisher identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.PublisherGuid">
            <summary>
            Gets or sets the application publisher unique identifier.
            </summary>
            <value>The application publisher unique identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode.Entry">
            <summary>
            Gets or sets the application entry information.
            </summary>
            <value>The application entry information.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode">
            <summary>
            Represents the contents of the application offer information from the marketplace.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.OfferId">
            <summary>
            Gets or sets the offer identifier.
            </summary>
            <value>The offer identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.MediaInstanceId">
            <summary>
            Gets or sets the offer media instance identifier.
            </summary>
            <value>The offer media instance identifier.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.ClientTypes">
            <summary>
            Gets or sets the offer client types.
            </summary>
            <value>The offer client types.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.PaymentTypes">
            <summary>
            Gets or sets the offer payment types.
            </summary>
            <value>The offer payment types.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.Store">
            <summary>
            Gets or sets the offer store.
            </summary>
            <value>The offer store.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.Price">
            <summary>
            Gets or sets the offer price.
            </summary>
            <value>The offer price.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.DisplayPrice">
            <summary>
            Gets or sets the offer display price.
            </summary>
            <value>The offer display price.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.PriceCurrencyCode">
            <summary>
            Gets or sets the offer price currency code.
            </summary>
            <value>The offer price currency code.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.LicenseRight">
            <summary>
            Gets or sets the offer license right.
            </summary>
            <value>The offer license right.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppOfferNode.Expiration">
            <summary>
            Gets or sets the offer expiration.
            </summary>
            <value>The offer expiration.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.MutexLock">
            <summary>
            Allows for inter-process locking and synchronization.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.MutexLock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cimbalino.Phone.Toolkit.Helpers.MutexLock"/> class.
            </summary>
            <param name="name">The name of the Mutex.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.MutexLock.Lock">
            <summary>
            Locks the Mutex and returns an <see cref="T:System.IDisposable"/> object that when disposed will release the Mutex.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object that when disposed will release the Mutex.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.MutexLock.Dispose">
            <summary>
            Releases the resources allocated by this <see cref="T:Cimbalino.Phone.Toolkit.Helpers.MutexLock"/> instance.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1">
            <summary>
            Optimized version of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> class.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> class.
            </summary>
            <param name="items">The collection from which the items are copied.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided event data.
            </summary>
            <param name="e">The event data to report in the event.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items collection to the current <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> instance.
            </summary>
            <param name="items">The collection from which the items are copied.</param>
            <exception cref="T:System.ArgumentNullException">The items list is null.</exception>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.ReplaceWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces the current <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> instance items with the ones specified in the items collection, raising a single <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event.
            </summary>
            <param name="items">The collection from which the items are copied.</param>
            <exception cref="T:System.ArgumentNullException">The items list is null.</exception>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.SwitchTo(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Switches the current <see cref="T:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1"/> instance items with the ones specified in the items collection, raising the minimum required change events.
            </summary>
            <param name="items">The collection from which the items are copied.</param>
            <exception cref="T:System.ArgumentNullException">The items list is null.</exception>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.OptimizedObservableCollection`1.SuppressEvents">
            <summary>
            Gets or sets a value indicating whether the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> events are raised.
            </summary>
            <value>true if the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> events are raised; otherwise, false.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.DeviceStatusService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService"/>.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService">
            <summary>
            Represents a service capable of obtaining information about the device on which it is running.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.ApplicationCurrentMemoryUsage">
            <summary>
            Gets the memory usage of the current application in bytes.
            </summary>
            <value>The memory usage of the current application in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.ApplicationMemoryUsageLimit">
            <summary>
            Gets the maximum amount of memory that your application process can allocate.
            </summary>
            <value>The maximum amount of memory that your application process can allocate.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.ApplicationPeakMemoryUsage">
            <summary>
            Gets the peak memory usage of the current application in bytes.
            </summary>
            <value>The peak memory usage of the current application in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.DeviceFirmwareVersion">
            <summary>
            Gets the firmware version running on the device.
            </summary>
            <value>The firmware version running on the device.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.DeviceHardwareVersion">
            <summary>
            Gets the hardware version running on the device.
            </summary>
            <value>The hardware version running on the device.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.DeviceManufacturer">
            <summary>
            Gets the device manufacturer name.
            </summary>
            <value>The device manufacturer name.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.DeviceName">
            <summary>
            Gets the device name.
            </summary>
            <value>The device name.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.DeviceTotalMemory">
            <summary>
            Gets the physical RAM size of the device in bytes.
            </summary>
            <value>The physical RAM size of the device in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.IsLowMemoryDevice">
            <summary>
            Gets a value indicating whether the device is a low memory device (less than 256 MB of memory installed).
            </summary>
            <value>true if the device is a low memory device (less than 256 MB of memory installed); otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.IsKeyboardDeployed">
            <summary>
            Gets a value indicating whether the user has deployed the physical hardware keyboard of the device.
            </summary>
            <value>true if the keyboard is deployed; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.IsKeyboardPresent">
            <summary>
            Gets a value indicating whether the device contains a physical hardware keyboard.
            </summary>
            <value>true if the device contains a physical hardware keyboard; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IDeviceStatusService.PowerSource">
            <summary>
            Gets the a value indicating whether the device is currently running on battery power or is plugged in to an external power supply.
            </summary>
            <value>true if the device is currently running on battery power or is plugged in to an external power supply; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.ApplicationCurrentMemoryUsage">
            <summary>
            Gets the memory usage of the current application in bytes.
            </summary>
            <value>The memory usage of the current application in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.ApplicationMemoryUsageLimit">
            <summary>
            Gets the maximum amount of memory that your application process can allocate.
            </summary>
            <value>
            The maximum amount of memory that your application process can allocate.
            </value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.ApplicationPeakMemoryUsage">
            <summary>
            Gets the peak memory usage of the current application in bytes.
            </summary>
            <value>The peak memory usage of the current application in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.DeviceFirmwareVersion">
            <summary>
            Gets the firmware version running on the device.
            </summary>
            <value>The firmware version running on the device.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.DeviceHardwareVersion">
            <summary>
            Gets the hardware version running on the device.
            </summary>
            <value>The hardware version running on the device.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.DeviceManufacturer">
            <summary>
            Gets the device manufacturer name.
            </summary>
            <value>The device manufacturer name.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.DeviceName">
            <summary>
            Gets the device name.
            </summary>
            <value>The device name.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.DeviceTotalMemory">
            <summary>
            Gets the physical RAM size of the device in bytes.
            </summary>
            <value>The physical RAM size of the device in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.IsLowMemoryDevice">
            <summary>
            Gets a value indicating whether the device is a low memory device (less than 256 MB of memory installed).
            </summary>
            <value>
            true if the device is a low memory device (less than 256 MB of memory installed); otherwise, false.
            </value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.IsKeyboardDeployed">
            <summary>
            Gets a value indicating whether the user has deployed the physical hardware keyboard of the device.
            </summary>
            <value>true if the keyboard is deployed; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.IsKeyboardPresent">
            <summary>
            Gets a value indicating whether the device contains a physical hardware keyboard.
            </summary>
            <value>
            true if the device contains a physical hardware keyboard; otherwise, false.
            </value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.DeviceStatusService.PowerSource">
            <summary>
            Gets the a value indicating whether the device is currently running on battery power or is plugged in to an external power supply.
            </summary>
            <value>
            true if the device is currently running on battery power or is plugged in to an external power supply; otherwise, false.
            </value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService">
            <summary>
            Represents a service capable of handling the application storage asynchronously.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.CopyFileAsync(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.CopyFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, and optionally overwrites an existing file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.CreateDirectoryAsync(System.String)">
            <summary>
            Creates a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to create within the storage.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.CreateFileAsync(System.String)">
            <summary>
            Creates a file in the store.
            </summary>
            <param name="path">The relative path of the file to be created in the store.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.DeleteDirectoryAsync(System.String)">
            <summary>
            Deletes a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to delete within the storage scope.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.DeleteFileAsync(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.DirectoryExistsAsync(System.String)">
            <summary>
            Determines whether the specified path refers to an existing directory in the store.
            </summary>
            <param name="dir">The path to test.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.FileExistsAsync(System.String)">
            <summary>
            Determines whether the specified path refers to an existing file in the store.
            </summary>
            <param name="path">The path and file name to test.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.GetDirectoryNamesAsync">
            <summary>
            Enumerates the directories in the root of a store.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.GetDirectoryNamesAsync(System.String)">
            <summary>
            Enumerates directories in a storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.GetFileNamesAsync">
            <summary>
            Obtains the names of files in the root of a store.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.GetFileNamesAsync(System.String)">
            <summary>
            Enumerates files in storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.OpenFileForReadAsync(System.String)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.ReadAllTextAsync(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.ReadAllTextAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.ReadAllLinesAsync(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.ReadAllLinesAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.ReadAllBytesAsync(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Returns null, if an exception is raised.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.WriteAllTextAsync(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.WriteAllTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.WriteAllBytesAsync(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ILockScreenService">
            <summary>
            Represents a service capable of handling the lock screen functionality.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ILockScreenService.RequestAccessAsync">
            <summary>
            Sets the current app as the lock screen background provider.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ILockScreenService.IsProvidedByCurrentApplication">
            <summary>
            Gets a value indicating whether the app is the current lock screen background provider.
            </summary>
            <value>true if the app is the current lock screen background provider; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ILockScreenService.ImageUri">
            <summary>
            Gets or sets the uniform resource identifier (URI) of the current lock screen background.
            </summary>
            <value>The Uniform Resource Identifier (URI) of the current lock screen background.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService">
            <summary>
            Represents a service capable of retrieving marketplace information about an application.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService.GetAppInformation(System.Action{Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode,System.Exception})">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <param name="resultAction">The <see cref="T:System.Action`2"/> to be called once the operation is finished.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService.GetAppInformation(System.String,System.Action{Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode,System.Exception})">
            <summary>
            Retrieves marketplace information about the specified application.
            </summary>
            <param name="productId">The application Product ID.</param>
            <param name="resultAction">The <see cref="T:System.Action`2"/> to be called once the operation is finished.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService.GetAppInformation(System.String,System.Globalization.CultureInfo,System.Action{Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode,System.Exception})">
            <summary>
            Retrieves marketplace information about the specified application, using the specified <see cref="T:System.Globalization.CultureInfo"/> for territory.
            </summary>
            <param name="productId">The application Product ID.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for territory.</param>
            <param name="resultAction">The <see cref="T:System.Action`2"/> to be called once the operation is finished.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService.GetAppInformationAsync">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService.GetAppInformationAsync(System.String)">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <param name="productId">The application Product ID.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService.GetAppInformationAsync(System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <param name="productId">The application Product ID.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for territory.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.INetworkInformationService">
            <summary>
            Represents a service capable of providing network information for a specific Windows Phone device.
            </summary>
        </member>
        <member name="E:Cimbalino.Phone.Toolkit.Services.INetworkInformationService.NetworkAvailabilityChanged">
            <summary>
            Occurs when the availability of the network changes.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.INetworkInformationService.CellularMobileOperator">
            <summary>
            Gets the name of the cellular mobile operator.
            </summary>
            <value>The name of the cellular mobile operator.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.INetworkInformationService.IsCellularDataEnabled">
            <summary>
            Gets a value indicating whether the network is cellular data enabled.
            </summary>
            <value>true if the network is cellular data enabled; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.INetworkInformationService.IsCellularDataRoamingEnabled">
            <summary>
            Gets a value indicating whether the network allows data roaming.
            </summary>
            <value>true if the network allows data roaming; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.INetworkInformationService.IsNetworkAvailable">
            <summary>
            Gets a value indicating whether the network is available.
            </summary>
            <value>true if the network is available; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.INetworkInformationService.IsWiFiEnabled">
            <summary>
            Gets a value indicating whether the network is Wi-Fi enabled.
            </summary>
            <value>true if the network is Wi-Fi enabled; otherwise, false.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IShellTileService">
            <summary>
            Represents a service capable of managing the Application Tile and secondary Tiles for an application. 
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IShellTileService.Create(System.Uri,Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData,System.Boolean)">
            <summary>
            Creates a new secondary tile.
            </summary>
            <param name="navigationUri"><see cref="T:System.Uri"/> for the tile being created. The <see cref="T:System.Uri"/> can contain custom launch parameters.</param>
            <param name="initialTileData">Text and image information for the tile being created.</param>
            <param name="supportsWideTile">true if the wide tile size is supported; otherwise, false.</param>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IShellTileService.LiveTilesSupported">
            <summary>
            Gets a value indicating whether live tiles are supported.
            </summary>
            <value>true if live tiles are supported; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IShellTileService.ActiveTiles">
            <summary>
            Gets the collection of an applications tiles pinned to Start.
            </summary>
            <value>The collection of an applications tiles pinned to Start.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTile">
            <summary>
            Represents an object capable of managing a Tile for an application.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTile.Update(Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData)">
            <summary>
            Updates an Application Tile or secondary Tile.
            </summary>
            <param name="data">New text and image data for the tile.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTile.Update(System.String)">
            <summary>
            Updates an Application Tile or secondary Tile.
            </summary>
            <param name="xmlData">The XML document that contains the tile data template information.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTile.Delete">
            <summary>
            Unpins and deletes a secondary tile.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTile.NavigationUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> and launch parameter this is navigated to when a secondary tile is tapped.
            </summary>
            <value>The <see cref="T:System.Uri"/> and launch parameter this is navigated to when a secondary tile is tapped.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData">
            <summary>
            Represents an object capable of handling tile data.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData.Title">
            <summary>
            Gets or sets the text to display in the tile.
            </summary>
            <value>The text to display in the tile.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.LockScreenServiceRequestResult">
            <summary>
            Indicates if the app was successfully or unsuccessfully set as the lock screen background provider.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.LockScreenServiceRequestResult.Denied">
            <summary>
            The app was not set as the lock screen background provider.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.LockScreenServiceRequestResult.Granted">
            <summary>
            The app was set as the lock screen background provider.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IMarketplaceInformationService"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService.GetAppInformation(System.Action{Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode,System.Exception})">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <param name="resultAction">The <see cref="T:System.Action`2"/> to be called once the operation is finished.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService.GetAppInformation(System.String,System.Action{Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode,System.Exception})">
            <summary>
            Retrieves marketplace information about the specified application.
            </summary>
            <param name="productId">The application Product ID.</param>
            <param name="resultAction">The <see cref="T:System.Action`2"/> to be called once the operation is finished.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService.GetAppInformation(System.String,System.Globalization.CultureInfo,System.Action{Cimbalino.Phone.Toolkit.Helpers.MarketplaceAppNode,System.Exception})">
            <summary>
            Retrieves marketplace information about the specified application, using the specified <see cref="T:System.Globalization.CultureInfo"/> for territory.
            </summary>
            <param name="productId">The application Product ID.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for territory.</param>
            <param name="resultAction">The <see cref="T:System.Action`2"/> to be called once the operation is finished.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService.GetAppInformationAsync">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService.GetAppInformationAsync(System.String)">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <param name="productId">The application Product ID.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.MarketplaceInformationService.GetAppInformationAsync(System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieves marketplace information about the running application.
            </summary>
            <param name="productId">The application Product ID.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for territory.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.NetworkInformationService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.INetworkInformationService"/>.
            </summary>
        </member>
        <member name="E:Cimbalino.Phone.Toolkit.Services.NetworkInformationService.NetworkAvailabilityChanged">
            <summary>
            Occurs when the availability of the network changes.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.NetworkInformationService.CellularMobileOperator">
            <summary>
            Gets the name of the cellular mobile operator.
            </summary>
            <value>The name of the cellular mobile operator.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.NetworkInformationService.IsCellularDataEnabled">
            <summary>
            Gets a value indicating whether the network is cellular data enabled.
            </summary>
            <value>true if the network is cellular data enabled; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.NetworkInformationService.IsCellularDataRoamingEnabled">
            <summary>
            Gets a value indicating whether the network allows data roaming.
            </summary>
            <value>true if the network allows data roaming; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.NetworkInformationService.IsNetworkAvailable">
            <summary>
            Gets a value indicating whether the network is available.
            </summary>
            <value>true if the network is available; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.NetworkInformationService.IsWiFiEnabled">
            <summary>
            Gets a value indicating whether the network is Wi-Fi enabled.
            </summary>
            <value>true if the network is Wi-Fi enabled; otherwise, false.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceAspectRatio">
            <summary>
            Describes the device aspect ratio.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceAspectRatio.Unknown">
            <summary>
            The device has an unknown aspect ratio.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceAspectRatio.AspectRatio15By9">
            <summary>
            The device has a 15:9 aspect ratio.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceAspectRatio.AspectRatio16By9">
            <summary>
            The device has a 16:9 aspect ratio.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IShellTileService"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ShellTileService.Create(System.Uri,Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData,System.Boolean)">
            <summary>
            Creates a new secondary tile.
            </summary>
            <param name="navigationUri"><see cref="T:System.Uri"/> for the tile being created. The <see cref="T:System.Uri"/> can contain custom launch parameters.</param>
            <param name="initialTileData">Text and image information for the tile being created.</param>
            <param name="supportsWideTile">true if the wide tile size is supported; otherwise, false.</param>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileService.LiveTilesSupported">
            <summary>
            Gets a value indicating whether live tiles are supported.
            </summary>
            <value>true if live tiles are supported; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileService.ActiveTiles">
            <summary>
            Gets the collection of an applications tiles pinned to Start.
            </summary>
            <value>The collection of an applications tiles pinned to Start.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileServiceCycleTileData">
            <summary>
            Describes a Tile template that cycles between 1 to 9 background images.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTileDataBase">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData"/>.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTileDataBase.Title">
            <summary>
            Gets or sets the text to display in the tile.
            </summary>
            <value>The text to display in the tile.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceCycleTileData.Count">
            <summary>
            Gets or sets a value between 1 and 99 that will be displayed in the Count field of the Tile. A value of 0 means the Count will not be displayed. If this property is not set, the Count display will not change during an update.
            </summary>
            <value>A value between 1 and 99 that will be displayed in the Count field of the Tile.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceCycleTileData.CycleImages">
            <summary>
            Gets or sets a collection of up to 9 background images for the medium and wide Tile sizes.
            </summary>
            <value>A collection of up to 9 background images for the medium and wide Tile sizes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceCycleTileData.SmallBackgroundImage">
            <summary>
            Gets or sets the front-side background image for the small Tile size.
            </summary>
            <value>The front-side background image for the small Tile size.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileServiceFlipTileData">
            <summary>
            Describes a Tile template that flips from the front to the back side. Allows customization of the background image and text for both the front and back Tile.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileServiceStandardTileData">
            <summary>
            Data for a tile pinned to Start. Tiles have a ‘front’ and ‘back’ to them and this class holds all this data.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceStandardTileData.BackBackgroundImage">
            <summary>
            Gets or sets the background image of the back of the Tile. If this property is an empty Uri, the background image of the back of the tile will not change during an update.
            </summary>
            <value>The background image of the back of the Tile.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceStandardTileData.BackContent">
            <summary>
            Gets or sets the text to display on the back of the tile, above the title. If this property is an empty string, the content on the back of the tile will not change during an update.
            </summary>
            <value>The text to display on the back of the tile, above the title.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceStandardTileData.BackgroundImage">
            <summary>
            Gets or sets the background image of the front of the Tile. If this property is an empty Uri, the background image of the front of the tile will not change during an update.
            </summary>
            <value>The background image of the front of the Tile. If this property is an empty Uri, the background image of the front of the tile will not change during an update.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceStandardTileData.BackTitle">
            <summary>
            Gets or sets the title to display at the bottom of the back of the Tile. If this property is an empty string, the title of the back of the tile will not change during an update.
            </summary>
            <value>The title to display at the bottom of the back of the Tile. If this property is an empty string, the title of the back of the tile will not change during an update.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceStandardTileData.Count">
            <summary>
            Gets or sets a value between 1 and 99 that will be displayed in the Count field of the Tile. A value of 0 means the Count will not be displayed. If this property is not set, the Count display will not change during an update.
            </summary>
            <value>A value between 1 and 99 that will be displayed in the Count field of the Tile.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceFlipTileData.SmallBackgroundImage">
            <summary>
            Gets or sets the front-side background image for the small Tile size.
            </summary>
            <value>The front-side background image for the small Tile size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceFlipTileData.WideBackgroundImage">
            <summary>
            Gets or sets the back-side background image for the wide Tile size.
            </summary>
            <value>The back-side background image for the wide Tile size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceFlipTileData.WideBackBackgroundImage">
            <summary>
            Gets or sets the text that displays above the title, on the back-side of the wide Tile size.
            </summary>
            <value>The text that displays above the title, on the back-side of the wide Tile size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceFlipTileData.WideBackContent">
            <summary>
            Gets or sets the front-side background image for the wide Tile size.
            </summary>
            <value>The front-side background image for the wide Tile size.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData">
            <summary>
            Describes an iconic Tile template.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.BackgroundColor">
            <summary>
            Gets or sets the background color of the Tile. Setting this property overrides the default theme color that is set on the phone.
            </summary>
            <value>The background color of the Tile.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.Count">
            <summary>
            Gets or sets a value between 1 and 99 that will be displayed in the Count field of the Tile. A value of 0 means the Count will not be displayed. If this property is not set, the Count display will not change during an update.
            </summary>
            <value>A value between 1 and 99 that will be displayed in the Count field of the Tile.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.IconImage">
            <summary>
            Gets or sets the icon image for the medium and large Tile sizes.
            </summary>
            <value>The icon image for the medium and large Tile sizes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.SmallIconImage">
            <summary>
            Gets or sets the icon image for the small Tile size.
            </summary>
            <value>The icon image for the small Tile size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.WideContent1">
            <summary>
            Gets or sets the text that displays on the first row of the wide Tile size.
            </summary>
            <value>The text that displays on the first row of the wide Tile size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.WideContent2">
            <summary>
            Gets or sets the text that displays on the second row of the wide Tile size.
            </summary>
            <value>The text that displays on the second row of the wide Tile size.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceIconicTileData.WideContent3">
            <summary>
            Gets or sets the text that displays on the third row of the wide Tile size.
            </summary>
            <value>The text that displays on the third row of the wide Tile size.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTile">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IShellTileServiceTile"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTile.Update(Cimbalino.Phone.Toolkit.Services.IShellTileServiceTileData)">
            <summary>
            Updates an Application Tile or secondary Tile.
            </summary>
            <param name="data">New text and image data for the tile.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTile.Update(System.String)">
            <summary>
            Updates an Application Tile or secondary Tile.
            </summary>
            <param name="xmlData">The XML document that contains the tile data template information.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTile.Delete">
            <summary>
            Unpins and deletes a secondary tile.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ShellTileServiceTile.NavigationUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> and launch parameter this is navigated to when a secondary tile is tapped.
            </summary>
            <value>The <see cref="T:System.Uri"/> and launch parameter this is navigated to when a secondary tile is tapped.</value>
        </member>
        <member name="T:System.Security.Cryptography.HMACMD5">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) using the <see cref="T:xBrainLab.Security.Cryptography.MD5" /> hash function
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACMD5"/> class using the supplied key with UT8 encoding.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACMD5"/> class using the supplied key with supplied encoding.
            </summary>
            <param name="key">The key.</param>
            <param name="encoding">The encoding used to read the key.</param>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACMD5"/> class the supplied key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.ComputeHash(System.String)">
            <summary>
            Computes the hash value for the specified string (UTF8 default encoding).
            </summary>
            <param name="buffer">The input to compute the hash code for. </param>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.ComputeHash(System.String,System.Text.Encoding)">
            <summary>
            Computes the hash value for the specified string.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            The computed hash code
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <returns>
            The computed hash code
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.ComputeHashToBase64String(System.String)">
            <summary>
            Computes the hash for the specified string (UTF8 default encoding) to base64 string.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <returns>The computed hash code in base64 string</returns>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.ComputeHashToBase64String(System.String,System.Text.Encoding)">
            <summary>
            Computes the hash for the specified string to base64 string.
            </summary>
            <param name="buffer">The input to compute the hash code for.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            The computed hash code in base64 string
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.InitializeKey(System.Byte[])">
            <summary>
            Initializes the key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.UpdateIOPadBuffers">
            <summary>
            Updates the IO pad buffers.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACMD5.Combine(System.Byte[],System.Byte[])">
            <summary>
            Combines two array (a1 and a2).
            </summary>
            <param name="a1">The Array 1.</param>
            <param name="a2">The Array 2.</param>
            <returns>Combinaison of a1 and a2</returns>
        </member>
        <member name="P:System.Security.Cryptography.HMACMD5.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllText(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllText(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Reads the lines of a file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to read.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Text.Encoding)">
            <summary>
            Reads the lines of a file that has a specified encoding.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllBytes(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllText(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllText(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllBytes(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten..
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllText(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllText(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllLines(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.DeleteDirectory(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The relative path of the directory to delete within the isolated storage scope.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllTextAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllTextAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllLinesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllLinesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.ReadAllBytesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllTextAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllTextAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllLinesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllLinesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.WriteAllBytesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten..
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllTextAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllTextAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllLinesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.IsolatedStorageFileExtensions.AppendAllLinesAsync(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="store">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> object.</param>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for <see cref="T:System.IO.Stream"/> instances.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions.ToArray(System.IO.Stream)">
            <summary>
            Writes the stream contents to a byte array.
            </summary>
            <param name="input">The input stream.</param>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions.ComputeSHA1Hash(System.IO.Stream)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA1"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions.ComputeSHA256Hash(System.IO.Stream)">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA256"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to compute the hash code for.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions.ComputeHMACSHA1Hash(System.IO.Stream,System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.HMACSHA1"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to compute the hash code for.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions.ComputeHMACSHA256Hash(System.IO.Stream,System.Byte[])">
            <summary>
            Computes the <see cref="T:System.Security.Cryptography.SHA256"/> hash for the current byte array using the managed library.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to compute the hash code for.</param>
            <param name="key">The key to use in the hash algorithm.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Extensions.StreamExtensions.ToArrayAsync(System.IO.Stream)">
            <summary>
            Writes the stream contents to a byte array.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest">
            <summary>
            Represents the contents of the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest.Current">
            <summary>
            Gets the current <see cref="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest"/> instance.
            </summary>
            <value>The current <see cref="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest"/> instance.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest.AppPlatformVersion">
            <summary>
            Gets or sets the version of the Windows Phone SDK or the runtime binaries of the platform. The default value is 8.0 for Windows Phone 8 and 7.1 for Windows Phone OS 7.1.
            </summary>
            <value>The version of the Windows Phone SDK or the runtime binaries of the platform.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest.DefaultLanguage">
            <summary>
            Gets or sets the application default language.
            </summary>
            <value>The application default language.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest.AppExtras">
            <summary>
            Gets or sets the application extra elements.
            </summary>
            <value>The application extra elements.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest.Languages">
            <summary>
            Gets or sets the application supported languages.
            </summary>
            <value>The application supported languages.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifest.App">
            <summary>
            Gets or sets the app detailed information.
            </summary>
            <value>The app detailed information.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode">
            <summary>
            Represents the app detailed information in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Author">
            <summary>
            Gets or sets the app author’s name.
            </summary>
            <value>The app author’s name.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.BitsPerPixel">
            <summary>
            Gets or sets the bits per pixel of the app. 16 or 32 bits per pixel.
            </summary>
            <value>The bits per pixel of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Description">
            <summary>
            Gets or sets the description of the app.
            </summary>
            <value>The description of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Genre">
            <summary>
            Gets or sets the app genre. The default value is either Apps.Normal or Apps.Game depending on the project type.
            </summary>
            <value>The app genre.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.HasSettings">
            <summary>
            Gets or sets a value indicating whether the app supports settings.
            </summary>
            <value>true if the app supports settings; otherwise false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.HubType">
            <summary>
            Gets or sets the hub type of the app. Enables your app to appear in the Extras section of the Music + Videos Hub. It is used for testing before app submission, and must be manually entered in the manifest file. A value of 1 enables this functionality.
            </summary>
            <value>The hub type of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.IsBeta">
            <summary>
            Gets or sets a value indicating whether the app is a beta app. This has consequences for the app license.
            </summary>
            <value>true if the app is a beta app; otherwise false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.ProductId">
            <summary>
            Gets or sets the app product id. The default value is the GUID for the project (128 bit). During the app submission process, a new product ID is inserted into the manifest file.
            </summary>
            <value>The app product id.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Publisher">
            <summary>
            Gets or sets the publisher of the app. This default value is the name of the project. This attribute is required for certain types of apps, such as push-enabled apps.
            </summary>
            <value>The publisher of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.PublisherId">
            <summary>
            Gets or sets the publisher id of the app. The default value is the GUID for the project (128 bit). During the app submission process, a new product ID is inserted into the manifest file.
            </summary>
            <value>The publisher id of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Title">
            <summary>
            Gets or sets the title of the app that appears in the app list or Games Hub. The default value is the name of the project.
            </summary>
            <value>The title of the app that appears in the app list or Games Hub.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Version">
            <summary>
            Gets or sets the app version. The default value is 1.0.0.0.
            </summary>
            <value>The app version.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.IconPath">
            <summary>
            Gets or sets the location of the app icon that is visible in the app list. The attributes are for internal use only.
            </summary>
            <value>The location of the app icon that is visible in the app list.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Capabilities">
            <summary>
            Gets or sets the software capability requirements of the app.
            </summary>
            <value>The software capabilities requirements of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.ScreenResolutions">
            <summary>
            Gets or sets the resolutions that the app supports.
            </summary>
            <value>The resolutions that the app supports.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Requirements">
            <summary>
            Gets or sets the hardware requirements of the app.
            </summary>
            <value>The hardware requirements of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Tasks">
            <summary>
            Gets or sets the tasks of the app.
            </summary>
            <value>The tasks of the app.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestAppNode.Tokens">
            <summary>
            Gets or sets the tokens of the app.
            </summary>
            <value>The tokens of the app.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestIconPathNode">
            <summary>
            Represents the location of the app icon that is visible in the app list.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestIconPathNode.IsRelative">
            <summary>
            Gets or sets a value indicating whether the icon location is relative.
            </summary>
            <value>true if the icon location is relative; otherwise false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestIconPathNode.IsResource">
            <summary>
            Gets or sets a value indicating whether the icon is a resource.
            </summary>
            <value>true if the icon is a resource; otherwise false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestIconPathNode.Value">
            <summary>
            Gets or sets the icon location.
            </summary>
            <value>The icon location.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestLanguageNode">
            <summary>
            Represents a language in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestLanguageNode.Code">
            <summary>
            Gets or sets the language code.
            </summary>
            <value>The language code.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestNamedNode">
            <summary>
            Represents a named node in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestNamedNode.Name">
            <summary>
            Gets or sets the Name attribute value.
            </summary>
            <value>The Name attribute value.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestTokenNode">
            <summary>
            Represents a token in the application manifest.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestTokenNode.TokenId">
            <summary>
            Gets or sets the token id.
            </summary>
            <value>The token id.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Helpers.ApplicationManifestTokenNode.TaskName">
            <summary>
            Gets or sets the token task name.
            </summary>
            <value>The token task name.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ApplicationManifestService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IApplicationManifestService"/>.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IApplicationManifestService">
            <summary>
            Represents a service capable of reading from the application manifest.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IApplicationManifestService.GetApplicationManifest">
            <summary>
            Gets the application manifest for the active app.
            </summary>
            <returns>The application manifest for the active app.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationManifestService.GetApplicationManifest">
            <summary>
            Gets the application manifest for the active app.
            </summary>
            <returns>The application manifest for the active app.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ApplicationProfileService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IApplicationProfileService"/>.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IApplicationProfileService">
            <summary>
            Represents a service capable of providing profile information about an app.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IApplicationProfileService.Mode">
            <summary>
            Gets a value that indicates the mode that an app is running in.
            </summary>
            <value>A value that indicates the mode that an app is running in.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ApplicationProfileService.Mode">
            <summary>
            Gets a value that indicates the mode that an app is running in.
            </summary>
            <value>A value that indicates the mode that an app is running in.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ApplicationProfileServiceMode">
            <summary>
            Describes the application profile mode.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ApplicationProfileServiceMode.Unknown">
            <summary>
            The application is running in an unknown mode.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ApplicationProfileServiceMode.Default">
            <summary>
            The application is running in default mode.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ApplicationProfileServiceMode.KidsCorner">
            <summary>
            The application is running under kids corner.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService"/>.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService">
            <summary>
            Represents a service capable of handling the application settings.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService.Get``1(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService.Get``1(System.String,``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The default value to return if the key does not exist.</param>
            <returns>The value associated with the specified key, if the key is found; otherwise, the specified default value.</returns>
            <typeparam name="T">The type of value to get.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService.Set``1(System.String,``0)">
            <summary>
            Sets the value for the specified key. If the entry does not exist, a new one will be added.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The value for the specified key.</param>
            <typeparam name="T">The type of value to set.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService.Reset(System.String)">
            <summary>
            Removes the specified key and associated value.
            </summary>
            <param name="key">The key whose value to reset.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService.Save">
            <summary>
            Saves this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings"/> instance.
            </summary>
            <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> does not have enough available free space.</exception>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IApplicationSettingsService.IsDirty">
            <summary>
            Gets a value indicating whether this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings"/> instance has changed.
            </summary>
            <value>true if this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings"/> instance has changed; otherwise, false.</value>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService"/> class.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.Get``1(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>
            The value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.
            </returns>
            <typeparam name="T">The type of value to get.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.Get``1(System.String,``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="defaultValue">The default value to return if the key does not exist.</param>
            <returns>
            The value associated with the specified key, if the key is found; otherwise, the specified default value.
            </returns>
            <typeparam name="T">The type of value to get.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.Set``1(System.String,``0)">
            <summary>
            Sets the value for the specified key. If the entry does not exist, a new one will be added.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="value">The value for the specified key.</param>
            <typeparam name="T">The type of value to set.</typeparam>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.Reset(System.String)">
            <summary>
            Removes the specified key and associated value.
            </summary>
            <param name="key">The key whose value to reset.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.Save">
            <summary>
            Saves this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings"/> instance.
            </summary>
            <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> does not have enough available free space.</exception>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ApplicationSettingsService.IsDirty">
            <summary>
            Gets a value indicating whether this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings"/> instance has changed.
            </summary>
            <value>
            true if this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings"/> instance has changed; otherwise, false.
            </value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IScreenInfoService">
            <summary>
            Represents a service capable of retrieving device resolution information.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IScreenInfoService.ScaleFactor">
            <summary>
            Gets a value indicating the device scale factor.
            </summary>
            <value>The device scale factor.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IScreenInfoService.Resolution">
            <summary>
            Gets the device resolution.
            </summary>
            <value>The device resolution.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IScreenInfoService.AspectRatio">
            <summary>
            Gets the device aspect ratio.
            </summary>
            <value>The device aspect ratio.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IScreenInfoService.Size">
            <summary>
            Gets the device screen size.
            </summary>
            <value>The device screen size.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IShellToastService">
            <summary>
            Represents a service capable of showing toast messages.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IShellToastService.Show(System.String,System.String)">
            <summary>
            Display a toast message with the specified title and content.
            </summary>
            <param name="title">The title of the toast message.</param>
            <param name="content">The contents of the toast message.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IShellToastService.Show(System.String,System.String,System.Uri)">
            <summary>
            Display a toast message with the specified title and content.
            </summary>
            <param name="title">The title of the toast message.</param>
            <param name="content">The contents of the toast message.</param>
            <param name="navigationUri">Uri to navigate to if the user taps the toast message.</param>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.IStorageService">
            <summary>
            Represents a service capable of handling the application storage.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, and optionally overwrites an existing file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.CreateDirectory(System.String)">
            <summary>
            Creates a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to create within the storage.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.CreateFile(System.String)">
            <summary>
            Creates a file in the store.
            </summary>
            <param name="path">The relative path of the file to be created in the store.</param>
            <returns>A new storage file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to delete within the storage scope.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.DirectoryExists(System.String)">
            <summary>
            Determines whether the specified path refers to an existing directory in the store.
            </summary>
            <param name="dir">The path to test.</param>
            <returns>true if path refers to an existing directory in the store and is not null; otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.FileExists(System.String)">
            <summary>
            Determines whether the specified path refers to an existing file in the store.
            </summary>
            <param name="path">The path and file name to test.</param>
            <returns>true if path refers to an existing file in the store and is not null; otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.GetDirectoryNames">
            <summary>
            Enumerates the directories in the root of a store.
            </summary>
            <returns>An <see cref="T:System.Array"/> of relative paths of directories in the root of the store. A zero-length array specifies that there are no directories in the root.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.GetDirectoryNames(System.String)">
            <summary>
            Enumerates directories in a storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>An <see cref="T:System.Array"/> of the relative paths of directories in the storage scope that match searchPattern. A zero-length array specifies that there are no directories that match.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.GetFileNames">
            <summary>
            Obtains the names of files in the root of a store.
            </summary>
            <returns>An <see cref="T:System.Array"/> of relative paths of files in the root of the store. A zero-length array specifies that there are no files in the root.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.GetFileNames(System.String)">
            <summary>
            Enumerates files in storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>An <see cref="T:System.Array"/> of relative paths of files in the storage scope that match searchPattern. A zero-length array specifies that there are no files that match.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.IncreaseQuotaTo(System.Int64)">
            <summary>
            Enables an application to explicitly request a larger quota size, in bytes.
            </summary>
            <param name="newQuotaSize">The requested size, in bytes.</param>
            <returns>true if the new quota is accepted by the user, otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a specified directory and its contents to a new location.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destinationDirectoryName">The path to the new location for sourceDirectoryName. This cannot be the path to an existing directory.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.MoveFile(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, and optionally lets you specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The path to the new location for the file. If a file name is included, the moved file will have that name.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <returns>A file that is opened in the specified mode, with read/write access, and is unshared.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with the specified file access.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <param name="access">The type of access to open the file with.</param>
            <returns>A file that is opened in the specified mode and access, and is unshared.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <param name="access">The type of access to open the file with.</param>
            <param name="share">The type of access other <see cref="T:System.IO.Stream"/> objects have to this file.</param>
            <returns>A file that is opened in the specified mode and access, and with the specified sharing options.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadLines(System.String)">
            <summary>
            Reads the lines of a file.
            </summary>
            <param name="path">The file to read.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Reads the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Returns null, if an exception is raised.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file. Returns null, if an exception is raised.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.IStorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IStorageService.AvailableFreeSpace">
            <summary>
            Gets a value that represents the amount of free space available for storage.
            </summary>
            <value>The available free storage space, in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.IStorageService.Quota">
            <summary>
            Gets a value that represents the maximum amount of space available for storage.
            </summary>
            <value>The limit of storage space, in bytes.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ScreenInfoService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IScreenInfoService"/>.
            </summary>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ScreenInfoService.ScaleFactor">
            <summary>
            Gets a value indicating the device scale factor.
            </summary>
            <value>The device scale factor.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ScreenInfoService.Resolution">
            <summary>
            Gets the device resolution.
            </summary>
            <value>The device resolution.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ScreenInfoService.AspectRatio">
            <summary>
            Gets the device aspect ratio.
            </summary>
            <value>The device aspect ratio.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.ScreenInfoService.Size">
            <summary>
            Gets the device screen size.
            </summary>
            <value>The device screen size.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceResolution">
            <summary>
            Describes the device resolution.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceResolution.Unknown">
            <summary>
            The device has an unknown resolution.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceResolution.WVGA">
            <summary>
            The device has a WVGA (480x800) resolution.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceResolution.HD720p">
            <summary>
            The device has a HD 720p (720x1280) resolution.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceResolution.WXGA">
            <summary>
            The device has a WXGA (768x1280) resolution.
            </summary>
        </member>
        <member name="F:Cimbalino.Phone.Toolkit.Services.ScreenInfoServiceResolution.HD1080p">
            <summary>
            The device has a HD 1080p (1080x1920) resolution.
            </summary>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.ShellToastService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IShellToastService"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ShellToastService.Show(System.String,System.String)">
            <summary>
            Display a toast message with the specified title and content.
            </summary>
            <param name="title">The title of the toast message.</param>
            <param name="content">The contents of the toast message.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.ShellToastService.Show(System.String,System.String,System.Uri)">
            <summary>
            Display a toast message with the specified title and content.
            </summary>
            <param name="title">The title of the toast message.</param>
            <param name="content">The contents of the toast message.</param>
            <param name="navigationUri">Uri to navigate to if the user taps the toast message.</param>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.StorageService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IStorageService"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, and optionally overwrites an existing file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.CreateDirectory(System.String)">
            <summary>
            Creates a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to create within the storage.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.CreateFile(System.String)">
            <summary>
            Creates a file in the store.
            </summary>
            <param name="path">The relative path of the file to be created in the store.</param>
            <returns>A new storage file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to delete within the storage scope.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.DirectoryExists(System.String)">
            <summary>
            Determines whether the specified path refers to an existing directory in the store.
            </summary>
            <param name="dir">The path to test.</param>
            <returns>
            true if path refers to an existing directory in the store and is not null; otherwise, false.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.FileExists(System.String)">
            <summary>
            Determines whether the specified path refers to an existing file in the store.
            </summary>
            <param name="path">The path and file name to test.</param>
            <returns>
            true if path refers to an existing file in the store and is not null; otherwise, false.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.GetDirectoryNames">
            <summary>
            Enumerates the directories in the root of a store.
            </summary>
            <returns>
            An <see cref="T:System.Array"/> of relative paths of directories in the root of the store. A zero-length array specifies that there are no directories in the root.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.GetDirectoryNames(System.String)">
            <summary>
            Enumerates directories in a storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>
            An <see cref="T:System.Array"/> of the relative paths of directories in the storage scope that match searchPattern. A zero-length array specifies that there are no directories that match.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.GetFileNames">
            <summary>
            Obtains the names of files in the root of a store.
            </summary>
            <returns>
            An <see cref="T:System.Array"/> of relative paths of files in the root of the store. A zero-length array specifies that there are no files in the root.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.GetFileNames(System.String)">
            <summary>
            Enumerates files in storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>
            An <see cref="T:System.Array"/> of relative paths of files in the storage scope that match searchPattern. A zero-length array specifies that there are no files that match.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.IncreaseQuotaTo(System.Int64)">
            <summary>
            Enables an application to explicitly request a larger quota size, in bytes.
            </summary>
            <param name="newQuotaSize">The requested size, in bytes.</param>
            <returns>true if the new quota is accepted by the user, otherwise, false.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a specified directory and its contents to a new location.
            </summary>
            <param name="sourceDirectoryName">The name of the directory to move.</param>
            <param name="destinationDirectoryName">The path to the new location for sourceDirectoryName. This cannot be the path to an existing directory.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.MoveFile(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, and optionally lets you specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The path to the new location for the file. If a file name is included, the moved file will have that name.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <returns>
            A file that is opened in the specified mode, with read/write access, and is unshared.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with the specified file access.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <param name="access">The type of access to open the file with.</param>
            <returns>
            A file that is opened in the specified mode and access, and is unshared.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <param name="access">The type of access to open the file with.</param>
            <param name="share">The type of access other <see cref="T:System.IO.Stream"/> objects have to this file.</param>
            <returns>
            A file that is opened in the specified mode and access, and with the specified sharing options.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadLines(System.String)">
            <summary>
            Reads the lines of a file.
            </summary>
            <param name="path">The file to read.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Reads the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Returns null, if an exception is raised.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>
            A byte array containing the contents of the file. Returns null, if an exception is raised.
            </returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.StorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.StorageService.AvailableFreeSpace">
            <summary>
            Gets a value that represents the amount of free space available for storage.
            </summary>
            <value>The available free storage space, in bytes.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.StorageService.Quota">
            <summary>
            Gets a value that represents the maximum amount of space available for storage.
            </summary>
            <value>The limit of storage space, in bytes.</value>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.AsyncStorageService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.IAsyncStorageService"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.CopyFileAsync(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.CopyFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, and optionally overwrites an existing file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.CreateDirectoryAsync(System.String)">
            <summary>
            Creates a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to create within the storage.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.CreateFileAsync(System.String)">
            <summary>
            Creates a file in the store.
            </summary>
            <param name="path">The relative path of the file to be created in the store.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.DeleteDirectoryAsync(System.String)">
            <summary>
            Deletes a directory in the storage scope.
            </summary>
            <param name="dir">The relative path of the directory to delete within the storage scope.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.DeleteFileAsync(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.DirectoryExistsAsync(System.String)">
            <summary>
            Determines whether the specified path refers to an existing directory in the store.
            </summary>
            <param name="dir">The path to test.</param>
            <returns>true if path refers to an existing directory in the store and is not null; otherwise, false.</returns>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.FileExistsAsync(System.String)">
            <summary>
            Determines whether the specified path refers to an existing file in the store.
            </summary>
            <param name="path">The path and file name to test.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.GetDirectoryNamesAsync">
            <summary>
            Enumerates the directories in the root of a store.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.GetDirectoryNamesAsync(System.String)">
            <summary>
            Enumerates directories in a storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.GetFileNamesAsync">
            <summary>
            Obtains the names of files in the root of a store.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.GetFileNamesAsync(System.String)">
            <summary>
            Enumerates files in storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.OpenFileForReadAsync(System.String)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="path">The relative path of the file within the store.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.ReadAllTextAsync(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.ReadAllTextAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.ReadAllLinesAsync(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.ReadAllLinesAsync(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.ReadAllBytesAsync(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Returns null, if an exception is raised.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.WriteAllTextAsync(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.WriteAllTextAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.WriteAllBytesAsync(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.AsyncStorageService.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cimbalino.Phone.Toolkit.Services.LockScreenService">
            <summary>
            Represents an implementation of the <see cref="T:Cimbalino.Phone.Toolkit.Services.ILockScreenService"/>.
            </summary>
        </member>
        <member name="M:Cimbalino.Phone.Toolkit.Services.LockScreenService.RequestAccessAsync">
            <summary>
            Sets the current app as the lock screen background provider.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.LockScreenService.IsProvidedByCurrentApplication">
            <summary>
            Gets a value indicating whether the app is the current lock screen background provider.
            </summary>
            <value>true if the app is the current lock screen background provider; otherwise, false.</value>
        </member>
        <member name="P:Cimbalino.Phone.Toolkit.Services.LockScreenService.ImageUri">
            <summary>
            Gets or sets the uniform resource identifier (URI) of the current lock screen background.
            </summary>
            <value>The Uniform Resource Identifier (URI) of the current lock screen background.</value>
        </member>
    </members>
</doc>
