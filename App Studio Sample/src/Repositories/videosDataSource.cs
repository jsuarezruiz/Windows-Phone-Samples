// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   DataSource.tt
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using WPAppStudio.Entities.Base;
using WPAppStudio.Repositories.Base;
using WPAppStudio.Shared;

namespace WPAppStudio.Repositories
{
    /// <summary>
    /// YouTube data source.
    /// </summary>
    [System.Runtime.CompilerServices.CompilerGenerated]
    [System.CodeDom.Compiler.GeneratedCode("Radarc", "4.0")]
    public class videosDataSource : IvideosDataSource 
    {
        private readonly IYoutubeDataSource _youtubeDataSource; 
		private const int MaxResults = 10;
		private const string YoutubeBaseUrl = "https://gdata.youtube.com/feeds/api/videos?{0}={1}&orderby=published&start-index={2}&max-results={3}&safeSearch=strict&format=5&v=2";
		private const string YoutubeQueryType = "q";
		private const string YoutubeQuery = @"nationalfootballleage";

        /// <summary>
        /// Initializes a new instance of the <see cref="videosDataSource" /> class.
        /// </summary>
        /// <param name="youtubeDataSource">A Youtube data source.</param>
        public videosDataSource(IYoutubeDataSource youtubeDataSource)
        {
            _youtubeDataSource = youtubeDataSource;
        }

        /// <summary>
        /// Retrieves the data from Youtube (query: nationalfootballleage ), in an observable collection of YouTubeVideo items.
        /// </summary>
        /// <returns>An observable collection of YouTubeVideo items.</returns>
        public async Task<ObservableCollection<YouTubeVideo>> GetData(int numPage)
        {
			return await LoadData(numPage);
        }
				
		/// <summary>
        /// Retrieves the data from Youtube (query: nationalfootballleage ), filtered by a filter specification, in an observable collection of YouTubeVideo items.
        /// </summary>
		/// <param name="filter">Filter operation specification</param>
        /// <returns>An observable collection of YouTubeVideo items.</returns>
        public async Task<ObservableCollection<YouTubeVideo>> Search(FilterSpecification filter)
        {
			var data = await LoadData(1);
            return Filter<YouTubeVideo>.FilterCollection(filter, data);
        }

        private async Task<ObservableCollection<YouTubeVideo>> LoadData(int pageNumber)
        {
			var items = await _youtubeDataSource.LoadRemote<IEnumerable<YouTubeVideo>>(String.Format(YoutubeBaseUrl, YoutubeQueryType, HttpUtility.UrlEncode(YoutubeQuery), pageNumber * MaxResults, MaxResults));
			return items != null ? new ObservableCollection<YouTubeVideo>(items) : new ObservableCollection<YouTubeVideo>();
        }
	}
}
