// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Windows.Input;
using WPAppStudio;
using WPAppStudio.Controls;
using WPAppStudio.Entities;
using WPAppStudio.Entities.Base;
using WPAppStudio.Localization;
using WPAppStudio.Repositories;
using WPAppStudio.Services;
using WPAppStudio.Services.Interfaces;
using WPAppStudio.Shared;
using WPAppStudio.ViewModel.Base;
using WPAppStudio.ViewModel.Interfaces;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of TheTeam_Album ViewModel.
    /// </summary>
    [System.Runtime.CompilerServices.CompilerGenerated]
    [System.CodeDom.Compiler.GeneratedCode("Radarc", "4.0")]
    public partial class TheTeam_AlbumViewModel : BindableBase, ITheTeam_AlbumViewModel
    {       

		private readonly IDialogService _dialogService;
		private readonly INavigationService _navigationService;
		private readonly ILockScreenService _lockScreenService;
		private readonly ITheGuysCollection _theGuysCollection;
		private readonly IawardsCollection _awardsCollection;
		private readonly IvideosDataSource _videosDataSource;
		private readonly IblogDataSource _blogDataSource;
        private IStorageService _storageService;

        /// <summary>
        /// Initializes a new instance of the <see cref="TheTeam_AlbumViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="lockScreenService">The Lock Screen Service.</param>
        /// <param name="theGuysCollection">The The Guys Collection.</param>
        /// <param name="awardsCollection">The Awards Collection.</param>
        /// <param name="videosDataSource">The Videos Data Source.</param>
        /// <param name="blogDataSource">The Blog Data Source.</param>
        public TheTeam_AlbumViewModel(IDialogService dialogService, INavigationService navigationService, ILockScreenService lockScreenService, ITheGuysCollection theGuysCollection, IawardsCollection awardsCollection, IvideosDataSource videosDataSource, IblogDataSource blogDataSource,
            IStorageService storageService)
        {
			_dialogService = dialogService;
			_navigationService = navigationService;
			_lockScreenService = lockScreenService;
			_theGuysCollection = theGuysCollection;
			_awardsCollection = awardsCollection;
			_videosDataSource = videosDataSource;
			_blogDataSource = blogDataSource;
            _storageService = storageService;
        }
		

		private ObservableCollection<TheGuysCollectionSchema> _theTeam_AlbumListControlCollection;

        /// <summary>
        /// TheTeam_AlbumListControlCollection property.
        /// </summary>		
        public ObservableCollection<TheGuysCollectionSchema> TheTeam_AlbumListControlCollection
        {
            get
            {
                if(_theTeam_AlbumListControlCollection == null)
					_theTeam_AlbumListControlCollection = _theGuysCollection.GetData();
				return _theTeam_AlbumListControlCollection;     
            }
            set
            {
                SetProperty(ref _theTeam_AlbumListControlCollection, value);
            }
        }

		private TheGuysCollectionSchema _selectedTheTeam_AlbumListControlCollection;

        /// <summary>
        /// SelectedTheTeam_AlbumListControlCollection property.
        /// </summary>		
        public TheGuysCollectionSchema SelectedTheTeam_AlbumListControlCollection
        {
            get
            {
				return _selectedTheTeam_AlbumListControlCollection;
            }
            set
            {
                _selectedTheTeam_AlbumListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<ITheTeam_DetailViewModel>(_selectedTheTeam_AlbumListControlCollection);
            }
        }

		private ObservableCollection<awardsSchema> _awards_ListListControlCollection;

        /// <summary>
        /// Awards_ListListControlCollection property.
        /// </summary>		
        public ObservableCollection<awardsSchema> Awards_ListListControlCollection
        {
            get
            {
                if(_awards_ListListControlCollection == null)
					_awards_ListListControlCollection = _awardsCollection.GetData();
				return _awards_ListListControlCollection;     
            }
            set
            {
                SetProperty(ref _awards_ListListControlCollection, value);
            }
        }

		private awardsSchema _selectedawards_ListListControlCollection;

        /// <summary>
        /// Selectedawards_ListListControlCollection property.
        /// </summary>		
        public awardsSchema Selectedawards_ListListControlCollection
        {
            get
            {
				return _selectedawards_ListListControlCollection;
            }
            set
            {
                _selectedawards_ListListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<Iawards_DetailViewModel>(_selectedawards_ListListControlCollection);
            }
        }

		private ObservableCollection<YouTubeVideo> _videos_VideosListControlCollection;

        /// <summary>
        /// Videos_VideosListControlCollection property.
        /// </summary>		
        public ObservableCollection<YouTubeVideo> Videos_VideosListControlCollection
        {
            get
            {
                if(_videos_VideosListControlCollection == null)
					Refreshvideos_VideosListControlCollectionDelegate();
				return _videos_VideosListControlCollection;     
            }
            set
            {
                SetProperty(ref _videos_VideosListControlCollection, value);
            }
        }

		private YouTubeVideo _selectedvideos_VideosListControlCollection;

        /// <summary>
        /// Selectedvideos_VideosListControlCollection property.
        /// </summary>		
        public YouTubeVideo Selectedvideos_VideosListControlCollection
        {
            get
            {
				return _selectedvideos_VideosListControlCollection;
            }
            set
            {
                _selectedvideos_VideosListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<Ivideos_DetailVideosViewModel>(_selectedvideos_VideosListControlCollection);
            }
        }

		private ObservableCollection<RssSearchResult> _blog_NewsListControlCollection;

        /// <summary>
        /// Blog_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<RssSearchResult> Blog_NewsListControlCollection
        {
            get
            {
                if(_blog_NewsListControlCollection == null)
					Refreshblog_NewsListControlCollectionDelegate();
				return _blog_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _blog_NewsListControlCollection, value);
            }
        }

		private RssSearchResult _selectedblog_NewsListControlCollection;

        /// <summary>
        /// Selectedblog_NewsListControlCollection property.
        /// </summary>		
        public RssSearchResult Selectedblog_NewsListControlCollection
        {
            get
            {
				return _selectedblog_NewsListControlCollection;
            }
            set
            {
                _selectedblog_NewsListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<Iblog_DetailViewModel>(_selectedblog_NewsListControlCollection);
            }
        }

        /// <summary>
        /// Delegate method for the Refreshvideos_VideosListControlCollection command.
        /// </summary>
        public async void Refreshvideos_VideosListControlCollectionDelegate(int pageNumber= 1) 
        {
			try
			{
				LoadingVideos_VideosListControlCollection = true;

                if (pageNumber == 1)
				{
					var items = await  _videosDataSource.GetData(1);
                    Videos_VideosListControlCollection = items;
				}
                else   
				{
					var items = await  _videosDataSource.GetData(pageNumber);
                    foreach (var item in items)                    
                        _videos_VideosListControlCollection.Add(item);
				}
			}
            catch (Exception ex)
            {
				Videos_VideosListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(AppResources.youtubeError + Environment.NewLine + AppResources.TryAgain);
            }
            finally
            {
				LoadingVideos_VideosListControlCollection = false;
			}
        }
		
		
        private bool _loadingVideos_VideosListControlCollection;
		
        public bool LoadingVideos_VideosListControlCollection
        {
            get { return _loadingVideos_VideosListControlCollection; }
            set { SetProperty(ref _loadingVideos_VideosListControlCollection, value); }
        }

        private ICommand _refreshvideos_VideosListControlCollection;

        /// <summary>
        /// Gets the Refreshvideos_VideosListControlCollection command.
        /// </summary>
        public ICommand Refreshvideos_VideosListControlCollection
        {
            get { return _refreshvideos_VideosListControlCollection = _refreshvideos_VideosListControlCollection ?? new DelegateCommand<int>(Refreshvideos_VideosListControlCollectionDelegate); }
        }

        /// <summary>
        /// Delegate method for the Refreshblog_NewsListControlCollection command.
        /// </summary>
        public async void Refreshblog_NewsListControlCollectionDelegate(int pageNumber= 1) 
        {
			try
			{
				LoadingBlog_NewsListControlCollection = true;
				Blog_NewsListControlCollection = await _blogDataSource.GetData();
                _storageService.Save<ObservableCollection<RssSearchResult>>("Blog_NewsListControlCollection", Blog_NewsListControlCollection);
			}
            catch (Exception ex)
            {
				Blog_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(AppResources.rssError + Environment.NewLine + AppResources.TryAgain);
            }
            finally
            {
				LoadingBlog_NewsListControlCollection = false;
			}
        }
		
		
        private bool _loadingBlog_NewsListControlCollection;
		
        public bool LoadingBlog_NewsListControlCollection
        {
            get { return _loadingBlog_NewsListControlCollection; }
            set { SetProperty(ref _loadingBlog_NewsListControlCollection, value); }
        }

        private ICommand _refreshblog_NewsListControlCollection;

        /// <summary>
        /// Gets the Refreshblog_NewsListControlCollection command.
        /// </summary>
        public ICommand Refreshblog_NewsListControlCollection
        {
            get { return _refreshblog_NewsListControlCollection = _refreshblog_NewsListControlCollection ?? new DelegateCommand<int>(Refreshblog_NewsListControlCollectionDelegate); }
        }

        /// <summary>
        /// Delegate method for the SetLockScreenCommand command.
        /// </summary>
        public  void SetLockScreenCommandDelegate() 
        {
	
				_lockScreenService.SetLockScreen("LockScreen-82fa5ab7-d43e-41a6-8776-42e6c6fa4cb5.jpg");
        }
		

        private ICommand _setLockScreenCommand;

        /// <summary>
        /// Gets the SetLockScreenCommand command.
        /// </summary>
        public ICommand SetLockScreenCommand
        {
            get { return _setLockScreenCommand = _setLockScreenCommand ?? new DelegateCommand(SetLockScreenCommandDelegate); }
        }
    }
}
